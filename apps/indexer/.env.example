# Networks - specify RPC URLs for each network you want to index. If empty, a public RPC will be used (not recommended).
# to run this locally, you can use anvil:
# anvil --fork-url <base-mainnet-rpc-url>
# or you can use a public RPC
PONDER_RPC_URL_31337="http://127.0.0.1:8545"
PONDER_RPC_URL_8453=

# (Optional) Start block for each network. If not provided, events will be processed from block 0.
PONDER_START_BLOCK_31337=
PONDER_START_BLOCK_8453="28312474"

# (Required) Postgres database URL.
DATABASE_URL=postgres://ponder:ponder@localhost:5432/ponder

# (Required) Neynar API key used to resolve farcaster user data by Ethereum address.
NEYNAR_API_KEY=

# (Optional) Sentry DSN for error tracking.
SENTRY_DSN=

# (Optional) Enable moderation. Moderation is enabled by default.
# If enabled, comments must be approved by indexer admin.
#
# Possible values: 1 or 0
# Default value is 0 (disabled)
MODERATION_ENABLED=0

# (Optional) Known reactions (comment type 1) which will be automatically approved if moderation is enabled
MODERATION_KNOWN_REACTIONS=like,dislike

# (Optional) Enable notifications about comments pending moderation.
#
# Possible values: 1 or 0
# Default value is 0 (disabled)
#
# If enabled MODERATION_TELEGRAM_BOT_TOKEN and MODERATION_TELEGRAM_CHANNEL_ID must be set.
MODERATION_ENABLE_NOTIFICATIONS=0

# (Required if MODERATION_ENABLE_NOTIFICATIONS is 1) Telegram bot token to send notifications about comments pending moderation.
MODERATION_TELEGRAM_BOT_TOKEN=

# (Required if MODERATION_ENABLE_NOTIFICATIONS is 1) Telegram channel ID to send notifications about comments pending moderation.
MODERATION_TELEGRAM_CHANNEL_ID=

# (Required if MODERATION_ENABLE_NOTIFICATIONS is 1) Webhook url that telegram will call
MODERATION_TELEGRAM_WEBHOOK_URL=https://api.ethcomments.xyz/api/webhook

# (Required if MODERATION_ENABLE_NOTIFICATIONS is 1) Secret used to encrypt webhook callback data
# You can generate one using: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
MODERATION_TELEGRAM_WEBHOOK_SECRET=

# (Required) ETH Mainnet RPC url used for ENS resolution
ENS_RPC_URL=""

# (Optional) ENSNode.io graphql subgraph url used for ENS resolution and suggestions
# If not set, suggestions won't be provided
ENSNODE_SUBGRAPH_URL="https://api.alpha.ensnode.io/subgraph"

# ERC20_RPC_URL_{chainId}=""
# RPC URL used to resolve comment ERC20 tickers/addresss
# You can set up multiple RPC endpoints and they will be used for resolution if the resolution for comment's chain id is not set, it will always return null
# Usually you should match the RPC urls for chains you are indexing
ERC20_RPC_URL_31337="http://127.0.0.1:8545"

# (REQUIRED FOR EVERY RPC URL) ERC20_TOKEN_URL_{chainId}=""
# A URL that is returned with erc20 token reference in token, {tokenAddress} is replaced with token's address at the chain.
# This value is used at index time so if you made a mistake it won't be updated unless you reindex
#
# For example for Mainnet this can be set as ERC20_TOKEN_URL_1="https://etherscan.io/address/{tokenAddress}"
ERC20_TOKEN_URL_31337="http://127.0.0.1:8545/{tokenAddress}"

# (Required) - Api Key for Sim Token Info API
SIM_API_KEY=

# (Optional) - Comment content length limit: comments beyound the limit will be dropped on indexing
# If not set, default to 10240
COMMENT_CONTENT_LENGTH_LIMIT=10240

# (Optional) - Telegram message content limit: messages to telegram truncated accordingly before sent.
# If not set, default to 4,096
TELEGRAM_MESSAGE_LENGTH_LIMIT=4096

