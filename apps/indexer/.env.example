# Networks - specify RPC URLs for each network you want to index. If empty, a public RPC will be used (not recommended).
# to run this locally, you can use anvil:
# anvil --fork-url <base-mainnet-rpc-url>
# or you can use a public RPC
PONDER_RPC_URL_31337="http://127.0.0.1:8545"
PONDER_RPC_URL_8453=

# (Optional) Start block for each network. If not provided, events will be processed from block 0.
PONDER_START_BLOCK_31337=
PONDER_START_BLOCK_8453="28312474"

# (Required) Postgres database URL.
DATABASE_URL=postgres://ponder:ponder@localhost:5432/ponder

# (Required) Neynar API key used to resolve farcaster user data by Ethereum address.
NEYNAR_API_KEY=

# (Optional) Sentry DSN for error tracking.
SENTRY_DSN=

# (Optional) Enable moderation. Moderation is enabled by default.
# If enabled, comments must be approved by indexer admin.
#
# Possible values: 1 or 0
# Default value is 0 (disabled)
MODERATION_ENABLED=0

# (Optional) Known reactions (comment type 1) which will be automatically approved if moderation is enabled
MODERATION_KNOWN_REACTIONS=like,dislike

# (Optional) Enable notifications about comments pending moderation.
#
# Possible values: 1 or 0
# Default value is 0 (disabled)
#
# If enabled MODERATION_TELEGRAM_BOT_TOKEN and MODERATION_TELEGRAM_CHANNEL_ID must be set.
MODERATION_ENABLE_NOTIFICATIONS=0

# (Required if MODERATION_ENABLE_NOTIFICATIONS is 1) classification score threshold (in percentage),
# only comments with one of its classification go beyound this threshold will be manually moderated
MODERATION_CLASSIFICATION_THRESHOLD=90

# (Optional) Use if you want to test notifications locally. 
# If you want to use notifications locally:
# 1. Obtain TELEGRAM_API_ID and TELEGRAM_API_HASH and set them in env variables. See https://github.com/aiogram/telegram-bot-api?tab=readme-ov-file#quick-reference
# 2. Start docker services using docker-compose up -d -f docker-compose.local.yml
# 3. Set this value to http://localhost:8081
# 4. Set MODERATION_TELEGRAM_WEBHOOK_URL to a url returned by `ngrok http 42069`. Like https://{someid}.ngrok-free.app/api/webhook
MODERATION_TELEGRAM_API_ROOT_URL=

# (Required if MODERATION_ENABLE_NOTIFICATIONS is 1) Telegram bot token to send notifications about comments pending moderation.
# To create a telegram bot, talk to @BotFather in telegram
MODERATION_TELEGRAM_BOT_TOKEN=

# (Required if MODERATION_ENABLE_NOTIFICATIONS is 1) Telegram channel ID to send notifications about comments pending moderation.
# To obtain the channel id, use @userinfobot in telegram
MODERATION_TELEGRAM_CHANNEL_ID=

# (Required if MODERATION_ENABLE_NOTIFICATIONS is 1) Webhook url that telegram will call
# In case of local telegram bot api, set this to http://localhost:42069/api/webhook
MODERATION_TELEGRAM_WEBHOOK_URL=https://api.ethcomments.xyz/api/webhook

# (Required if MODERATION_ENABLE_NOTIFICATIONS is 1) Secret used to encrypt webhook callback data
# You can generate one using: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
MODERATION_TELEGRAM_WEBHOOK_SECRET=

# (Optional) Enable automatic classification of comments
# Default value is 0 (disabled)
#
# If enabled MODERATION_MBD_API_KEY must be set
MODERATION_ENABLE_AUTOMATIC_CLASSIFICATION=0

# (Optional - used only if MODERATION_ENABLE_AUTOMATIC_CLASSIFICATION=1) - MBD.xyz api key used to classify comment contents.
MODERATION_MBD_API_KEY=

# (Optional) - Used when filtering /api/comments?excludeModerationLabels Only comments that have lower score for a label than this threshold will be returned
# The allowed values are floating point number in range 0..1
MODERATION_DEFAULT_CLASSIFICATION_SCORE_THRESHOLD=0.2
# (Optional) - Custom thresholds per class, if omitted, the default classification score threshold will be used
MODERATION_CLASSIFICATION_HARASSMENT_THRESHOLD=
MODERATION_CLASSIFICATION_HATE_THREATENING_THRESHOLD=
MODERATION_CLASSIFICATION_HATE_THRESHOLD=
MODERATION_CLASSIFICATION_LLM_GENERATED_THRESHOLD=
MODERATION_CLASSIFICATION_SELF_HARM_THRESHOLD=
MODERATION_CLASSIFICATION_SEXUAL_MINORS_THRESHOLD=
MODERATION_CLASSIFICATION_SEXUAL_THRESHOLD=
MODERATION_CLASSIFICATION_SPAM_THRESHOLD=
MODERATION_CLASSIFICATION_VIOLENCE_GRAPHIC_THRESHOLD=
MODERATION_CLASSIFICATION_VIOLENCE_THRESHOLD=

# (Optional) Enable notifications about pending reports.
#
# Possible values: 1 or 0
# Default value is 0 (disabled)
#
# If enabled all MODERATION_TELEGRAM_* env variables must be set
REPORTS_ENABLE_NOTIFICATIONS=0

##Â ADMIN TELEGRAM BOT CONFIGURATION

# (Optional) Enable admin telegram bot.
# If enabled, the bot will be used to manage comments and reports.
# Possible values: 1 or 0
# Default value is 0 (disabled)
ADMIN_TELEGRAM_BOT_ENABLED=0

# (Optional) - this is useful if you want to test admin bot locally
# If you want to use notifications locally:
# 1. Obtain TELEGRAM_API_ID and TELEGRAM_API_HASH and set them in env variables. See https://github.com/aiogram/telegram-bot-api?tab=readme-ov-file#quick-reference
# 2. Start docker services using docker-compose up -d -f docker-compose.local.yml
# 3. Set this value to http://localhost:8081
# 4. Set MODERATION_TELEGRAM_WEBHOOK_URL to a url returned by `ngrok http 42069`. Like https://{someid}.ngrok-free.app/api/webhook/bot
ADMIN_TELEGRAM_BOT_API_ROOT_URL=

# (Required if bot is enabled) Telegram bot token.
ADMIN_TELEGRAM_BOT_TOKEN=

# (Required if bot is enabled) Comma separated list of user ids that are allowed to use the bot
ADMIN_TELEGRAM_BOT_ALLOWED_USER_IDS=

# (Required if bot is enabled) Webhook url that telegram will call
# This url must be publicly accessible and should point to the /api/webhook/bot endpoint of the indexer
#
# For local development, you can use a service like ngrok to expose your local server to the internet.
# For example, if your indexer is running on port 42069, you can use
# ngrok http 42069
# and set the webhook url to https://<ngrok-id>.ngrok.io/api/webhook/bot
ADMIN_TELEGRAM_BOT_WEBHOOK_URL=https://api.ethcomments.xyz/api/webhook/bot

# (Required if bot is enabled) Secret used to encrypt webhook callback data
# You can generate one using: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
ADMIN_TELEGRAM_BOT_WEBHOOK_SECRET=

# Admin Bot API URL used during local development.
# If set, please make sure you also set ADMIN_TELEGRAM_BOT_WEBHOOK_URL to point to local webhook url by using ngrok or similar service.
# ADMIN_TELEGRAM_BOT_API_ROOT_URL="http://localhost:8081"

# (Required) ETH Mainnet RPC url used for ENS resolution
ENS_RPC_URL=""

# (Optional) ENSNode.io graphql subgraph url used for ENS resolution and suggestions
# If not set, suggestions won't be provided
ENSNODE_SUBGRAPH_URL="https://api.alpha.ensnode.io/subgraph"

# ERC20_RPC_URL_{chainId}=""
# RPC URL used to resolve comment ERC20 tickers/addresss
# You can set up multiple RPC endpoints and they will be used for resolution if the resolution for comment's chain id is not set, it will always return null
# Usually you should match the RPC urls for chains you are indexing
ERC20_RPC_URL_31337="http://127.0.0.1:8545"

# (REQUIRED FOR EVERY RPC URL) ERC20_TOKEN_URL_{chainId}=""
# A URL that is returned with erc20 token reference in token, {tokenAddress} is replaced with token's address at the chain.
# This value is used at index time so if you made a mistake it won't be updated unless you reindex
#
# For example for Mainnet this can be set as ERC20_TOKEN_URL_1="https://etherscan.io/address/{tokenAddress}"
ERC20_TOKEN_URL_31337="http://127.0.0.1:8545/{tokenAddress}"

# (Required) - Api Key for Sim Token Info API
SIM_API_KEY=

# (Optional) - Comment content length limit: comments beyound the limit will be dropped on indexing
# If not set, default to 10240
COMMENT_CONTENT_LENGTH_LIMIT=10240

# (Optional) - Telegram message content limit: messages to telegram truncated accordingly before sent.
# If not set, default to 4,096
TELEGRAM_MESSAGE_LENGTH_LIMIT=4096

