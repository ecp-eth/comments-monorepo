diff --git a/dist/theme/context/partials/member.signatureParameters.d.ts b/dist/theme/context/partials/member.signatureParameters.d.ts
index 2ba0473dd11235f71ce51c3a5016264a5ace9afc..84544039b198b42f6ba24e872f0da596b7239259 100644
--- a/dist/theme/context/partials/member.signatureParameters.d.ts
+++ b/dist/theme/context/partials/member.signatureParameters.d.ts
@@ -1,3 +1,5 @@
 import { MarkdownThemeContext } from '../../../theme/index.js';
 import { ParameterReflection } from 'typedoc';
-export declare function signatureParameters(this: MarkdownThemeContext, model: ParameterReflection[]): string;
+export declare function signatureParameters(this: MarkdownThemeContext, model: ParameterReflection[], options?: {
+    forceExpandParameters?: boolean;
+}): string;
diff --git a/dist/theme/context/partials/member.signatureParameters.js b/dist/theme/context/partials/member.signatureParameters.js
index cd925739e39255a9eabb8562c91aaa6b248753cb..ea45c147209529841aa9510c9a75b06bf83be583 100644
--- a/dist/theme/context/partials/member.signatureParameters.js
+++ b/dist/theme/context/partials/member.signatureParameters.js
@@ -1,5 +1,5 @@
 import { backTicks } from '../../../libs/markdown/index.js';
-export function signatureParameters(model) {
+export function signatureParameters(model, options) {
     const format = this.options.getValue('useCodeBlocks');
     const firstOptionalParamIndex = model.findIndex((parameter) => parameter.flags.isOptional);
     return ('(' +
@@ -10,14 +10,13 @@ export function signatureParameters(model) {
                 paramsmd.push('...');
             }
             const paramType = this.partials.someType(param.type);
-            const showParamType = this.options.getValue('expandParameters');
+            const showParamType = (options?.forceExpandParameters ?? false) ||
+                this.options.getValue('expandParameters');
             const optional = param.flags.isOptional ||
                 (firstOptionalParamIndex !== -1 && i > firstOptionalParamIndex)
                 ? '?'
                 : '';
-            const paramItem = [
-                `${backTicks(`${param.name}${optional}`)}`,
-            ];
+            const paramItem = [`${backTicks(`${param.name}${optional}`)}`];
             if (showParamType) {
                 paramItem.push(paramType);
             }
diff --git a/dist/theme/context/partials/type.reflection.declaration.js b/dist/theme/context/partials/type.reflection.declaration.js
index c65af13f0e6a6829aa44d1aeb6504e29ad3c63ca..6963fa7d685233015f2781f5875c5c46543cecf1 100644
--- a/dist/theme/context/partials/type.reflection.declaration.js
+++ b/dist/theme/context/partials/type.reflection.declaration.js
@@ -23,13 +23,21 @@ export function declarationType(model, options) {
                 const name = [];
                 if (obj.getSignature) {
                     name.push('get');
-                    name.push(backTicks(obj.name) + '\n ');
+                    name.push(backTicks(obj.name) + '()');
                 }
-                if (obj.setSignature) {
+                else if (obj.setSignature) {
                     name.push('set');
-                    name.push(backTicks(obj.name));
+                    const params = obj.setSignature.parameters
+                        ? this.partials.signatureParameters(obj.setSignature.parameters, {
+                            forceExpandParameters: true,
+                        })
+                        : '()';
+                    name.push(backTicks(obj.name) + params);
+                }
+                else {
+                    const displayObjectName = obj.name + (obj.flags?.isOptional ? '?' : '');
+                    name.push(backTicks(displayObjectName));
                 }
-                name.push(backTicks(obj.name));
                 const theType = this.helpers.getDeclarationType(obj);
                 const typeString = this.partials.someType(theType, options);
                 if (shouldFormat) {
diff --git a/dist/theme/context/partials/type.union.js b/dist/theme/context/partials/type.union.js
index 5ed2350532637d79c015315e14ec5dd0cf2720e1..d7f1af79d52b62c86ea4e0f963126758a6dc1361 100644
--- a/dist/theme/context/partials/type.union.js
+++ b/dist/theme/context/partials/type.union.js
@@ -1,6 +1,8 @@
 export function unionType(model) {
     const useCodeBlocks = this.options.getValue('useCodeBlocks');
-    const typesOut = model.types.map((unionType) => this.partials.someType(unionType, { forceCollapse: true }));
+    const typesOut = model.types.map((unionType) => this.partials.someType(unionType, {
+        forceCollapse: true,
+    }));
     const shouldFormat = useCodeBlocks &&
         (typesOut?.join('').length > 70 || typesOut?.join('').includes('\n'));
     const md = typesOut.join(shouldFormat ? `\n  \\| ` : ` \\| `);
diff --git a/dist/theme/context/resources.d.ts b/dist/theme/context/resources.d.ts
index 316bf14302b311550c99a0af069a99e9b4544412..ecf7a58755415fdcd5fe71bc18f0b3fc7a20bb3f 100644
--- a/dist/theme/context/resources.d.ts
+++ b/dist/theme/context/resources.d.ts
@@ -87,7 +87,9 @@ There is no association list partial for properties as these are handled as a st
         multipleSignatures?: boolean | undefined;
         hideTitle?: boolean | undefined;
     }) => string;
-    signatureParameters: (model: ParameterReflection[]) => string;
+    signatureParameters: (model: ParameterReflection[], options?: {
+        forceExpandParameters?: boolean | undefined;
+    } | undefined) => string;
     signatureReturns: (model: SignatureReflection, options: {
         headingLevel: number;
     }) => string;
diff --git a/dist/theme/context/resources.js b/dist/theme/context/resources.js
index d21a4973c8f8df0d662146be195ac635d346791d..7c68e0b1b4ca0a4d8cce562c8bf18b9498a86a25 100644
--- a/dist/theme/context/resources.js
+++ b/dist/theme/context/resources.js
@@ -43,7 +43,7 @@ export const resourcePartials = (context) => {
         propertiesTable: (model, options) => partials.propertiesTable.apply(context, [model, options]),
         referenceMember: (model) => partials.referenceMember.apply(context, [model]),
         signature: (model, options) => partials.signature.apply(context, [model, options]),
-        signatureParameters: (model) => partials.signatureParameters.apply(context, [model]),
+        signatureParameters: (model, options) => partials.signatureParameters.apply(context, [model, options]),
         signatureReturns: (model, options) => partials.signatureReturns.apply(context, [model, options]),
         signatureTitle: (model, options) => partials.signatureTitle.apply(context, [model, options]),
         signatures: (model, options) => partials.signatures.apply(context, [model, options]),
diff --git a/dist/theme/markdown-theme-context.d.ts b/dist/theme/markdown-theme-context.d.ts
index bbefd145b074575042b4f57acf70952c6001877f..4bd7350809a753ada43a25e2eddae120e8cf8d1a 100644
--- a/dist/theme/markdown-theme-context.d.ts
+++ b/dist/theme/markdown-theme-context.d.ts
@@ -167,7 +167,9 @@ export declare class MarkdownThemeContext {
             multipleSignatures?: boolean | undefined;
             hideTitle?: boolean | undefined;
         }) => string;
-        signatureParameters: (model: import("typedoc").ParameterReflection[]) => string;
+        signatureParameters: (model: import("typedoc").ParameterReflection[], options?: {
+            forceExpandParameters?: boolean | undefined;
+        } | undefined) => string;
         signatureReturns: (model: import("typedoc").SignatureReflection, options: {
             headingLevel: number;
         }) => string;
