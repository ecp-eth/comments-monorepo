diff --git a/dist/esm/graphql/middleware.js b/dist/esm/graphql/middleware.js
index 605ee4f3fb2a64dc823191c3b13dfbe9a2fbf01c..e81c2dafbca9f210bcc58ce956c9f3ea5019f32f 100644
--- a/dist/esm/graphql/middleware.js
+++ b/dist/esm/graphql/middleware.js
@@ -24,7 +24,7 @@ import { buildDataLoaderCache, buildGraphQLSchema } from "./index.js";
  * export default app;
  *
  */
-export const graphql = ({ schema }, { maxOperationTokens = 1000, maxOperationDepth = 100, maxOperationAliases = 30, } = {
+export const graphql = ({ schema }, { maxOperationTokens = 1000, maxOperationDepth = 100, maxOperationAliases = 30, plugins = [] } = {
     // Default limits are from Apollo:
     // https://www.apollographql.com/blog/prevent-graph-misuse-with-operation-size-and-complexity-limit
     maxOperationTokens: 1000,
@@ -48,6 +48,7 @@ export const graphql = ({ schema }, { maxOperationTokens = 1000, maxOperationDep
             maxTokensPlugin({ n: maxOperationTokens }),
             maxDepthPlugin({ n: maxOperationDepth, ignoreIntrospection: false }),
             maxAliasesPlugin({ n: maxOperationAliases, allowList: [] }),
+            ...plugins,
         ],
     });
     return createMiddleware(async (c) => {
diff --git a/dist/types/graphql/middleware.d.ts b/dist/types/graphql/middleware.d.ts
index 6f8b37a2cd37b2ea62ade04f0b935af1efcf1f5a..b357347d68cd47a7775bef88ef22feb684187a90 100644
--- a/dist/types/graphql/middleware.d.ts
+++ b/dist/types/graphql/middleware.d.ts
@@ -1,5 +1,7 @@
 import type { Schema } from '../internal/types.js';
 import type { ReadonlyDrizzle } from '../types/db.js';
+import { type Plugin, createYoga } from "graphql-yoga";
+
 /**
  * Middleware for GraphQL with an interactive web view.
  *
@@ -21,9 +23,10 @@ import type { ReadonlyDrizzle } from '../types/db.js';
 export declare const graphql: ({ schema }: {
     db: ReadonlyDrizzle<Schema>;
     schema: Schema;
-}, { maxOperationTokens, maxOperationDepth, maxOperationAliases, }?: {
+}, { maxOperationTokens, maxOperationDepth, maxOperationAliases }?: {
     maxOperationTokens?: number | undefined;
     maxOperationDepth?: number | undefined;
     maxOperationAliases?: number | undefined;
+    plugins?: Plugin[] | undefined;
 }) => import("hono").MiddlewareHandler<any, string, {}>;
 //# sourceMappingURL=middleware.d.ts.map
